---
// Fetch data from API
let notices = [];
try {
  const response = await fetch('http://localhost:3000/api/notices');
  const data = await response.json();
  notices = data.notices || [];
} catch (error) {
  console.error('Error fetching notices:', error);
}

// Helper function to format date
function formatDate(dateString) {
  if (!dateString) return 'Sin fecha';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Helper function to truncate content
function truncateText(text, maxLength = 100) {
  if (!text) return 'Sin contenido';
  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

// Helper function to format full date with more details
function formatFullDate(dateString) {
  if (!dateString) return 'Fecha no disponible';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}
---

<div class="w-full max-w-7xl mx-auto p-6 bg-white">
  <!-- Header Section -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Avisos y Noticias</h1>
    <p class="text-gray-600">Últimas actualizaciones y comunicados</p>
    <div class="mt-4 flex items-center justify-between">
      <span class="text-sm text-gray-500">
        Total: {notices.length} avisos
      </span>
      <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 text-sm font-medium">
        Actualizar
      </button>
    </div>
  </div>

  <!-- Table Container -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
    <!-- Desktop Table -->
    <div class="hidden md:block overflow-x-auto">
      <table class="w-full">
        <thead class="bg-gray-50 border-b border-gray-200">
          <tr>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              ID
            </th>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Título
            </th>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Autor
            </th>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Contenido
            </th>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Fecha
            </th>
            <th class="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          {notices.length === 0 ? (
            <tr>
              <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                <div class="flex flex-col items-center">
                  <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  <p class="text-lg font-medium">No hay avisos disponibles</p>
                  <p class="text-sm">Los avisos aparecerán aquí cuando estén disponibles</p>
                </div>
              </td>
            </tr>
          ) : (
            notices.map((notice) => (
              <tr class="hover:bg-gray-50 transition-colors duration-150">
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    #{notice.id}
                  </span>
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm font-medium text-gray-900 max-w-xs">
                    {notice.title || 'Sin título'}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-8 w-8">
                      <div class="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                        <span class="text-xs font-medium text-gray-600">
                          {notice.autor ? notice.autor.charAt(0).toUpperCase() : '?'}
                        </span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <div class="text-sm text-gray-900">
                        {notice.autor || 'Sin autor'}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4">
                  <div class="text-sm text-gray-600 max-w-md">
                    {truncateText(notice.content)}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {formatDate(notice.time_created)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex space-x-2">
                    <button class="text-blue-600 hover:text-blue-900 transition-colors duration-200">
                      Ver
                    </button>
                    <button 
                      class="text-indigo-600 hover:text-indigo-900 transition-colors duration-200 edit-btn"
                      data-notice-id={notice.id}
                      data-notice-title={notice.title || 'Sin título'}
                      data-notice-author={notice.autor || 'Sin autor'}
                      data-notice-content={notice.content || 'Sin contenido'}
                      data-notice-date={notice.time_created || ''}
                    >
                      Editar
                    </button>
                  </div>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>

    <!-- Mobile Cards -->
    <div class="md:hidden">
      {notices.length === 0 ? (
        <div class="p-6 text-center text-gray-500">
          <svg class="w-12 h-12 text-gray-300 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <p class="text-lg font-medium">No hay avisos disponibles</p>
        </div>
      ) : (
        <div class="divide-y divide-gray-200">
          {notices.map((notice) => (
            <div class="p-6 hover:bg-gray-50 transition-colors duration-150">
              <div class="flex items-start justify-between mb-3">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  #{notice.id}
                </span>
                <div class="flex space-x-2">
                  <button class="text-blue-600 hover:text-blue-900 text-sm">Ver</button>
                  <button 
                    class="text-indigo-600 hover:text-indigo-900 text-sm edit-btn"
                    data-notice-id={notice.id}
                    data-notice-title={notice.title || 'Sin título'}
                    data-notice-author={notice.autor || 'Sin autor'}
                    data-notice-content={notice.content || 'Sin contenido'}
                    data-notice-date={notice.time_created || ''}
                  >
                    Editar
                  </button>
                </div>
              </div>
              
              <h3 class="text-lg font-medium text-gray-900 mb-2">
                {notice.title || 'Sin título'}
              </h3>
              
              <div class="flex items-center mb-3">
                <div class="flex-shrink-0 h-6 w-6">
                  <div class="h-6 w-6 rounded-full bg-gray-300 flex items-center justify-center">
                    <span class="text-xs font-medium text-gray-600">
                      {notice.autor ? notice.autor.charAt(0).toUpperCase() : '?'}
                    </span>
                  </div>
                </div>
                <span class="ml-2 text-sm text-gray-600">
                  {notice.autor || 'Sin autor'}
                </span>
              </div>
              
              <p class="text-sm text-gray-600 mb-3">
                {truncateText(notice.content)}
              </p>
              
              <p class="text-xs text-gray-500">
                {formatDate(notice.time_created)}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>

  <!-- Pagination (Optional) -->
  <div class="mt-6 flex items-center justify-between">
    <div class="text-sm text-gray-500">
      Mostrando {notices.length} de {notices.length} avisos
    </div>
    <div class="flex space-x-2">
      <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50" disabled>
        Anterior
      </button>
      <button class="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50" disabled>
        Siguiente
      </button>
    </div>
  </div>

  <!-- Modal -->
  <div id="noticeModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
    <!-- Modal Header -->
    <div class="flex items-center justify-between pb-4 border-b border-gray-200">
      <h3 class="text-xl font-semibold text-gray-900">
        Editar Aviso
      </h3>
      <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Modal Body - Form -->
    <form id="editNoticeForm" class="mt-6 space-y-6">
      <!-- ID and Status -->
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <span id="modalId" class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
            #1
          </span>
          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
            Activo
          </span>
        </div>
        <div class="text-sm text-gray-500" id="modalDate">
          Fecha no disponible
        </div>
      </div>

      <!-- Title -->
      <div>
        <label for="editTitle" class="block text-sm font-medium text-gray-700 mb-2">Título *</label>
        <input 
          type="text" 
          id="editTitle" 
          name="title"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200"
          placeholder="Ingrese el título del aviso"
        />
      </div>

      <!-- Author -->
      <div>
        <label for="editAuthor" class="block text-sm font-medium text-gray-700 mb-2">Autor *</label>
        <div class="flex items-center space-x-3">
          <div class="flex-shrink-0 h-10 w-10">
            <div id="modalAuthorAvatar" class="h-10 w-10 rounded-full bg-indigo-500 flex items-center justify-center">
              <span class="text-sm font-medium text-white">A</span>
            </div>
          </div>
          <input 
            type="text" 
            id="editAuthor" 
            name="author"
            required
            class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200"
            placeholder="Nombre del autor"
          />
        </div>
      </div>

      <!-- Content -->
      <div>
        <label for="editContent" class="block text-sm font-medium text-gray-700 mb-2">Contenido *</label>
        <textarea 
          id="editContent" 
          name="content"
          required
          rows="6"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 resize-vertical"
          placeholder="Escriba el contenido del aviso..."
        ></textarea>
        <div class="mt-1 text-sm text-gray-500">
          <span id="contentCounter">0</span> caracteres
        </div>
      </div>

      <!-- Additional Info -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-200">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Fecha de Creación</label>
          <div id="modalFullDate" class="text-sm text-gray-600 p-2 bg-gray-50 rounded">
            Fecha completa aparecerá aquí
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
          <select name="status" class="text-sm border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
            <option value="active">Activo</option>
            <option value="inactive">Inactivo</option>
            <option value="draft">Borrador</option>
          </select>
        </div>
      </div>

      <!-- Hidden field for ID -->
      <input type="hidden" id="editId" name="id" />
    </form>

    <!-- Modal Footer -->
    <div class="flex items-center justify-end pt-6 border-t border-gray-200 space-x-3">
      <button id="cancelModal" type="button" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors duration-200">
        Cancelar
      </button>
      <button id="saveChanges" type="button" class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 transition-colors duration-200 flex items-center space-x-2">
        <span id="saveText">Guardar Cambios</span>
        <svg id="loadingSpinner" class="hidden animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Alert/Notification System -->
<div id="alertContainer" class="fixed top-4 right-4 z-60 space-y-2"></div>

<script>
  // Modal functionality
  const modal = document.getElementById('noticeModal');
  const closeModalBtn = document.getElementById('closeModal');
  const cancelModalBtn = document.getElementById('cancelModal');
  const saveChangesBtn = document.getElementById('saveChanges');
  const editButtons = document.querySelectorAll('.edit-btn');
  const form = document.getElementById('editNoticeForm');
  const alertContainer = document.getElementById('alertContainer');

  // Form elements
  const editTitle = document.getElementById('editTitle');
  const editAuthor = document.getElementById('editAuthor');
  const editContent = document.getElementById('editContent');
  const contentCounter = document.getElementById('contentCounter');

  // Function to format full date
  function formatFullDate(dateString) {
    if (!dateString) return 'Fecha no disponible';
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  // Function to show alert
  function showAlert(message, type = 'success') {
    const alertId = 'alert-' + Date.now();
    const alertColors = {
      success: 'bg-green-50 border-green-200 text-green-800',
      error: 'bg-red-50 border-red-200 text-red-800',
      warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',
      info: 'bg-blue-50 border-blue-200 text-blue-800'
    };

    const alertIcons = {
      success: `<svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
      </svg>`,
      error: `<svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
      </svg>`,
      warning: `<svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
      </svg>`,
      info: `<svg class="w-5 h-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
      </svg>`
    };

    const alertHTML = `
      <div id="${alertId}" class="flex items-center p-4 border rounded-lg shadow-lg ${alertColors[type]} transform translate-x-full transition-transform duration-300 ease-in-out max-w-md">
        <div class="flex-shrink-0">
          ${alertIcons[type]}
        </div>
        <div class="ml-3 flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <div class="ml-4 flex-shrink-0">
          <button onclick="removeAlert('${alertId}')" class="inline-flex text-gray-400 hover:text-gray-600 focus:outline-none">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
    `;

    alertContainer.insertAdjacentHTML('beforeend', alertHTML);
    
    // Animate in
    setTimeout(() => {
      const alertElement = document.getElementById(alertId);
      if (alertElement) {
        alertElement.classList.remove('translate-x-full');
      }
    }, 100);

    // Auto remove after 5 seconds
    setTimeout(() => {
      removeAlert(alertId);
    }, 5000);
  }

  // Function to remove alert
  window.removeAlert = function(alertId) {
    const alertElement = document.getElementById(alertId);
    if (alertElement) {
      alertElement.classList.add('translate-x-full');
      setTimeout(() => {
        alertElement.remove();
      }, 300);
    }
  }

  // Function to update character counter
  function updateCharacterCounter() {
    const count = editContent.value.length;
    contentCounter.textContent = count;
    
    if (count > 500) {
      contentCounter.classList.add('text-red-500');
    } else if (count > 400) {
      contentCounter.classList.add('text-yellow-500');
      contentCounter.classList.remove('text-red-500');
    } else {
      contentCounter.classList.remove('text-red-500', 'text-yellow-500');
    }
  }

  // Function to update author avatar
  function updateAuthorAvatar() {
    const avatar = document.getElementById('modalAuthorAvatar');
    const authorName = editAuthor.value.trim();
    const initial = authorName ? authorName.charAt(0).toUpperCase() : '?';
    avatar.querySelector('span').textContent = initial;
  }

  function openModal(noticeData) {
    document.getElementById('modalId').textContent = `#${noticeData.id}`;
    document.getElementById('editId').value = noticeData.id;
    document.getElementById('editTitle').value = noticeData.title;
    document.getElementById('editAuthor').value = noticeData.author;
    document.getElementById('editContent').value = noticeData.content;
    document.getElementById('modalDate').textContent = formatFullDate(noticeData.date);
    document.getElementById('modalFullDate').textContent = formatFullDate(noticeData.date);
    
    updateCharacterCounter();
    updateAuthorAvatar();
    
    // Show modal
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    setTimeout(() => {
      editTitle.focus();
    }, 100);
  }

  function closeModal() {
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
    form.reset();
  }

  function setLoadingState(loading) {
    const saveText = document.getElementById('saveText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    
    if (loading) {
      saveText.textContent = 'Guardando...';
      loadingSpinner.classList.remove('hidden');
      saveChangesBtn.disabled = true;
      saveChangesBtn.classList.add('opacity-75', 'cursor-not-allowed');
    } else {
      saveText.textContent = 'Guardar Cambios';
      loadingSpinner.classList.add('hidden');
      saveChangesBtn.disabled = false;
      saveChangesBtn.classList.remove('opacity-75', 'cursor-not-allowed');
    }
  }

  async function saveChanges() {
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }

    // Get form data
    const formData = new FormData(form);
    const noticeData = {
      id: formData.get('id'),
      title: formData.get('title'),
      autor: formData.get('author'),
      content: formData.get('content'),
      status: formData.get('status')
    };

    setLoadingState(true);

    try {
      const response = await fetch(`YOUR_API_ENDPOINT_HERE/notices/${noticeData.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(noticeData)
      });

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      
      // Success
      showAlert('¡Aviso actualizado exitosamente!', 'success');
      closeModal();
      
      setTimeout(() => {
        window.location.reload();
      }, 1500);

    } catch (error) {
      console.error('Error saving notice:', error);
      showAlert(`Error al guardar: ${error.message}`, 'error');
    } finally {
      setLoadingState(false);
    }
  }

  // Add event listeners to edit buttons
  editButtons.forEach(button => {
    button.addEventListener('click', function() {
      const noticeData = {
        id: this.dataset.noticeId,
        title: this.dataset.noticeTitle,
        author: this.dataset.noticeAuthor,
        content: this.dataset.noticeContent,
        date: this.dataset.noticeDate
      };
      openModal(noticeData);
    });
  });

  // Add event listeners to modal controls
  closeModalBtn.addEventListener('click', closeModal);
  cancelModalBtn.addEventListener('click', closeModal);
  saveChangesBtn.addEventListener('click', saveChanges);

  // Add event listeners for form interactions
  editContent.addEventListener('input', updateCharacterCounter);
  editAuthor.addEventListener('input', updateAuthorAvatar);

  // Close modal when clicking outside
  modal.addEventListener('click', function(e) {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Handle form submission with Enter key
  form.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      saveChanges();
    }
  });
</script>

<style>
  /* Custom scrollbar for table */
  .overflow-x-auto::-webkit-scrollbar {
    height: 8px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 4px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
</style>
